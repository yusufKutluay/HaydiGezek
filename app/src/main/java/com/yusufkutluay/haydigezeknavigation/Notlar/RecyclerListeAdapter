package com.yusufkutluay.haydigezeknavigation.Adapter

import android.Manifest
import android.app.Activity
import android.app.AlertDialog
import android.content.Context.LOCATION_SERVICE
import android.content.pm.PackageManager
import android.location.Location
import android.location.LocationManager
import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.RecyclerView
import com.google.android.gms.common.api.ApiException
import com.google.android.gms.maps.model.LatLng
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase
import com.google.maps.DirectionsApi
import com.google.maps.GeoApiContext
import com.google.maps.model.TravelMode
import com.squareup.picasso.Picasso
import com.yusufkutluay.haydigezeknavigation.Model.RotaListModel
import com.yusufkutluay.haydigezeknavigation.databinding.RecyclerListeBinding
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.IOException

class RecyclerListeAdapter(val postList: ArrayList<RotaListModel>) : RecyclerView.Adapter<RecyclerListeAdapter.ListHolder>() {

    val db = Firebase.firestore
    class ListHolder(val binding: RecyclerListeBinding) : RecyclerView.ViewHolder(binding.root)

    private lateinit var roundedDistance : String

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ListHolder {
        val binding = RecyclerListeBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return ListHolder(binding)
    }

    override fun getItemCount(): Int {
        return postList.size
    }

    override fun onBindViewHolder(holder: ListHolder, position: Int) {
        val selectedLocation = LatLng(postList[position].enlemRota, postList[position].boylamRota)
        val locationManager = holder.itemView.context.getSystemService(LOCATION_SERVICE) as LocationManager

        // İzni kontrol et
        if (ContextCompat.checkSelfPermission(holder.itemView.context, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
            val currentLocation = locationManager.getLastKnownLocation(LocationManager.FUSED_PROVIDER)
            currentLocation?.let {
                val myLocation = LatLng(it.latitude, it.longitude)
                drawRoute(myLocation, selectedLocation, holder)
            }
        } else {
            // İzin yoksa iste
            ActivityCompat.requestPermissions(holder.itemView.context as Activity, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), 1)
        }

        // Diğer verileri ayarla
        holder.binding.textName.text = postList[position].nameRota
        Picasso.get().load(postList[position].urlGorselRota).into(holder.binding.imageRota)




        val auth = FirebaseAuth.getInstance()
        val userId = auth.currentUser!!.email



        holder.binding.listeCikar.setOnClickListener {
            val itemId = postList[position].documentId
            db.collection("usersRota").document(userId!!).collection("selectedPlaces").document(itemId).delete()
                .addOnSuccessListener {
                    // Remove item from the list
                    postList.removeAt(position)
                    // Notify the adapter about the removed item
                    notifyItemRemoved(position)
                    notifyItemRangeChanged(position, postList.size)
                }
                .addOnFailureListener { e ->
                    // Handle the failure
                    e.printStackTrace()
                }
        }
    }


    // Rota çizen ve süreyi hesaplayan fonksiyon
    private fun drawRoute(origin: LatLng, destination: LatLng, holder: ListHolder) {
        val apiKey = "AIzaSyD6KRKlUdjH7TcM3B2S13iqQtqkYqi10DU" // API keyinizi buraya girin

        GlobalScope.launch(Dispatchers.IO) {
            try {
                val directionsResult = DirectionsApi.newRequest(getGeoApiContext(apiKey))
                    .mode(TravelMode.DRIVING)
                    .origin("${origin.latitude},${origin.longitude}")
                    .destination("${destination.latitude},${destination.longitude}")
                    .await()

                if (directionsResult.routes.isNotEmpty() && directionsResult.routes[0].legs.isNotEmpty()) {
                    val distanceInMeters = directionsResult.routes[0].legs[0].distance.inMeters
                    val distanceInKm = distanceInMeters / 1000.0
                    roundedDistance = distanceInKm.toInt().toString() // Rakamlar virgülden sonra olmasın
                    withContext(Dispatchers.Main) {
                        holder.binding.textView12.text = "Mesafe: $roundedDistance km"

                    }
                }




                // Kullanım
                val durationInMinutes = directionsResult.routes[0].legs[0].duration.inSeconds / 60
                val formattedDuration = formatDurationToTurkish(durationInMinutes)
                holder.binding.textView21.text = "Süre : ${formattedDuration}"







            } catch (e: ApiException) {
                e.printStackTrace()
            } catch (e: InterruptedException) {
                e.printStackTrace()
            } catch (e: IOException) {
                e.printStackTrace()
            }
        }
    }

    private fun getGeoApiContext(apiKey: String): GeoApiContext {
        return GeoApiContext.Builder()
            .apiKey(apiKey)
            .build()
    }

    fun formatDurationToTurkish(durationInMinutes: Long): String {
        val hours = durationInMinutes / 60
        val minutes = durationInMinutes % 60

        return if (hours > 0) {
            "${hours} saat ${minutes} dakika"
        } else {
            "${minutes} dakika"
        }
    }
}
